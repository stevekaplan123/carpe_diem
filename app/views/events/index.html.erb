<style>

body {
    font-family:Arial;
    font-size:12px;
}

p {
    border-style: solid;
    border-width: 1px;
    margin-right: 40%;
}

#content {
  margin-left:  50%;
  padding: 4px ;
  z-index: -1;
}
#menuwrapper {
  float: left;
  width: 50%;
  padding: 4px ;

}

/*get all filter buttons in the same row*/
#filter_buttons li{
  font-size: 1.15em;
  display: inline;
}



#lower-group {
  height: 500px;
  overflow: scroll;
}

#map-group {
  height: 572px;
}


/* Clear float */
.clear{
    clear:both;
}
</style>


<script type='text/javascript' src="https://maps.googleapis.com/maps/api/js?sensor=false"></script>
    <script type='text/javascript'>
        //the following function causes page to refresh
        (function()
        {
          if( window.localStorage )
          {
            if( !localStorage.getItem( 'firstLoad' ) )
            {
              localStorage[ 'firstLoad' ] = true;
              window.location.reload()
            }  
            else
              localStorage.removeItem( 'firstLoad' );
          }
        })();


        var gMap = null;
        var attendance_window = null;
        var desc_window = null;
        var markers = [];
        var me_window =  null; 
        var loc = null;
        var windows = [];
        var tag = null;
        var attendances = []
        var count=0
        var curr_zoom = 0


        var locationReq = "0";
        var timeReq = "0";
        var friendReq = "0";
        var users = new Object()

        
        window.onload = function(){
            <% @users.each do |user| %>
                <% if user != nil %>
                users[<%= user[0] %>] = '<%= user[1] %>'
                <% end %>
            <% end %>
            locationReq = checkCookies("loc")
            timeReq = checkCookies("time")
            friendReq = checkCookies("friends")
            curr_zoom = 15
            var myOptions = {
                center: new google.maps.LatLng(42.3654347, -71.258595),
                zoom: curr_zoom,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            gMap = new google.maps.Map(document.getElementById('map_canvas'), myOptions);

            loadAttendances()

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(success, error); 

            } else { 
                error();
            }

            hide_and_seek_menus()            
       }

       function hide_and_seek_menus()
       {
          count += 1
          var ULs = document.getElementsByClassName("menu");
          for (var i=0; i<ULs.length; i++)
          {
            if (count % 2 == 0)
            {
                ULs[i].style.visibility = "visible";
            }
            else
            {
                ULs[i].style.visibility = "hidden";
            }

          }
       }


      function loadXMLDoc(locArg, timeArg, friendArg) {          
        if (loc=="error") //if loc error and no value set on map
        {
            alert("In order to see events near you, either allow geolocation on your browser or select your position on the map.")
        }
        //first just gets the right xmlhttp based on browser
          var xmlhttp = loadXMLHTTP()
          //each time state changes, from 0 to 1 to 2 to 3 to 4, check if it finished (finished means state of 4)
          //and check status is 200, if status != 200, then the server failed to respond correctly (404 or 500)  
          xmlhttp.onreadystatechange=function()
          {
            if (xmlhttp.readyState==4 && xmlhttp.status==200)
            {
              clearMarkers()        //first clear old event markers and clear out table of events
              clearWindows()
              curr_zoom = 15            //reset zoom and center to brandeis campus
              gMap.setZoom(curr_zoom)
              gMap.setCenter(new google.maps.LatLng(42.3654347, -71.258595))
              //clear out the old list of events
              document.getElementById("below_menu").innerHTML = ""
              document.getElementById("below_menu").innerHTML = filteredHTMLTitle(locArg, timeArg, friendArg)
                //now show the filtered events
              result = JSON.parse(xmlhttp.responseText);
              length = result.length;
              if (length==0)
              {
                 document.getElementById("below_menu").innerHTML += "<h4><i>[NO RESULTS]</i></h4>" 

              }
              for (i=0; i<length; i++)
              {
                  latitude=JSON.parse(xmlhttp.responseText)[i]["latitude"];
                  longitude=JSON.parse(xmlhttp.responseText)[i]["longitude"];
                  var event_id = JSON.parse(xmlhttp.responseText)[i]["id"].toString();
                  var event_name=JSON.parse(xmlhttp.responseText)[i]["name"];
                  var creator_id=JSON.parse(xmlhttp.responseText)[i]["creator_id"];
                  var creator_name = users[creator_id]
                  var description = JSON.parse(xmlhttp.responseText)[i]["description"]
                  makeItFit(latitude, longitude) //zoom out if necessary to have all events on map
                  markEvents(latitude, longitude, event_name) //mark events on map that were result of filtering by 'type'
                  document.getElementById("below_menu").innerHTML += eventHTML(event_id, event_name, creator_id, creator_name, description, xmlhttp) 
              }    

            }
          }
        xmlhttp.open("GET","/events/filter.json?location="+loc+"&near_me="+locArg+"&friendship="+friendArg+"&time="+timeArg,true);
        xmlhttp.send();
      }

        function makeItFit(lat, lng)
        {
            var bounds = gMap.getBounds();
            var ne = bounds.getNorthEast(); // LatLng of the north-east corner 73, 180
            var sw = bounds.getSouthWest(); // LatLng of the south-west corder -85, -180
            //var nw = new google.maps.LatLng(ne.lat(), sw.lng());
           // var se = new google.maps.LatLng(sw.lat(), ne.lng());
            if (ne.lat() >= lat && sw.lat() <= lat && ne.lng() >= lng && sw.lng() <= lng)
            {
              return true;
            }
            else
            {
              curr_zoom = curr_zoom - 2;
              gMap.setZoom(curr_zoom)
              makeItFit(lat, lng)
            }
        }

       function getCookie(cname) {
            var name = cname + "=";
            var ca = document.cookie.split(';');
            for(var i=0; i<ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0)==' ') c = c.substring(1);
                if (c.indexOf(name) == 0) {
                    return c.substring(name.length, c.length);
                }
            }
        }

      function setCookie(cname,cvalue,exdays) {
            var d = new Date();
            d.setTime(d.getTime() + (exdays*24*60*60*1000));
            var expires = "expires=" + d.toGMTString();
            document.cookie = cname+"="+cvalue+"; "+expires;
        }

      function checkCookies(type) {
          uid = '<%= current_user.id %>'
          if (type == "friends")
          {
             var friends_pref = getCookie(uid+"carpe_diem_preferences_friend");
             if (friends_pref != "" && friends_pref != null)
             {
                return friends_pref
             }
          }
          else if (type == "loc")
          {
             var loc_pref = getCookie(uid+"carpe_diem_preferences_loc");
             if (loc_pref != "" && loc_pref != null)
             {
                return loc_pref
             }
          }
          else if (type == "time")
          {
             var time_pref = getCookie(uid+"carpe_diem_preferences_time");
             if (time_pref != "" && time_pref != null)
             {
                return time_pref
             }
          }
          else
          {
             return 0;
          }

          return 0;
      }
        
      function setFilterArgs(type, arg) {
        uid = '<%= current_user.id %>'
        setCookie(uid+"carpe_diem_preferences_"+type, arg, 30)
        if(type=="loc"){
          locationReq = arg;
        }
        else if(type=="time") {
          timeReq = arg;
        }
        else if(type=="friend") {
          friendReq = arg;
        }
        else {
          friendReq = "0";
        }
      }

      function sendFilterArgs() {
        loadXMLDoc(locationReq, timeReq, friendReq);
      }

      function filteredHTMLTitle(locMsg, timeMsg, friendMsg){
        var msg="";

        var tempTime = timeMsg;
        if (tempTime == "30") {
          tempTime = "30 mins";
        }
        else if(tempTime == "0"){
          //do nothing
        }
        else {
          tempTime += " hour(s)";
        }

        if(locMsg=="0") {
          if (tempTime =="0"){
            if (friendMsg=="0") {
              msg="No Criteria Set"
            }
            else if (friendMsg=="going_to"){
              msg="Events that my friends are going to"
            }      
            else {
              msg="Events that my friends created"
            }
          }  
          else {
            if (friendMsg=="0") {
              msg="Events happening in "+tempTime
            }
            else if (friendMsg=="going_to"){
              msg="Events happening in "+tempTime+" that my friends are going to"
            }      
            else {
              msg="Events happening in "+tempTime+" that my friends created"
            } 
          }   
        }
        else {
          if (tempTime =="0"){
            if (friendMsg=="0") {
              msg="Events within "+locMsg+" meters"
            }
            else if (friendMsg=="going_to"){
              msg="Events within "+locMsg+" meters that my friends are going to"
            }      
            else {
              msg="Events within "+locMsg+" meters that my friends created"
            }
          }  
          else {
            if (friendMsg=="0") {
              msg="Events within "+locMsg+" meters happening in "+tempTime
            }
            else if (friendMsg=="going_to"){
              msg="Events within "+locMsg+" meters happening in "+tempTime+" that my friends are going to"
            }      
            else {
              msg="Events within "+locMsg+" meters happening in "+tempTime+" that my friends created"
            } 
          }


        } 

        return "<h4>"+msg+"</h4><br>";
      }




      function hide_menus()
       {
          var ULs = document.getElementsByClassName("dropdown-menu");
          for (var i=0; i<ULs.length; i++)
          {
                ULs[i].style.visibility = "hidden";
          }
       }



      function success(position) {
         document.getElementById("locationDiv").innerHTML = position.coords.latitude + ", " + position.coords.longitude; 
         loc = document.getElementById("locationDiv").innerHTML.split(", ")
         tag = ""
         var latitude = loc[0]
         var longitude = loc[1]
         markMe(latitude, longitude)
         loadXMLDoc(locationReq, timeReq, friendReq)  //use default params

       }


       function error() {
          document.getElementById("locationDiv").innerHTML = "error"
          loc = "error"

          //user needs to be able to click on map
          google.maps.event.addListener(gMap, 'click', function(event) {
              var lat = event.latLng.lat()
              var lng = event.latLng.lng()
              loc = lat.toString() + ", " + lng.toString()
              markMe(lat, lng)
          });
          loadXMLDoc("0", timeReq, friendReq)
       }


        function loadAttendances()
        {
          var event_id;
          <% current_user.attendances.each do |attending| %>
               event_id = '<%= attending['event_id'] %>'
               attendances.push(event_id)
          <% end %>
        }


        function loadXMLHTTP()
        {
          var xmlhttp;
           if (window.XMLHttpRequest)
              {// code for IE7+, Firefox, Chrome, Opera, Safari
              xmlhttp=new XMLHttpRequest();
              }
            else
              {// code for IE6, IE5
              xmlhttp=new hoverXObject("Microsoft.XMLHTTP");
              }
          return xmlhttp;
        }

        function markMe(latitude, longitude)
        {
            if (me_window != null)
            {
                me_window.close()
            }
            me_window = new google.maps.InfoWindow({
                content: "You are here",
                position: new google.maps.LatLng(latitude, longitude),
             });

            me_window.open(gMap);
        }

        function markEvents(latitude, longitude, event_name)
        {
              var temp_latlng = new google.maps.LatLng(latitude, longitude);
              marker = new google.maps.Marker({
                  position: temp_latlng,
                  map: gMap,
                  title: event_name
              });

              markers.push(marker) 
        }

        function clearMarkers()
        {
            for (var i = 0; i < markers.length; i++) {
              markers[i].setMap(null);
          }
        }

        function eventHTML(event_id, event_name, creator_id, creator_name, description, xmlhttp)
        {
          var append_to="";  
          var current_name = '<%= current_user.name %>';
          var current_id = <%= current_user.id %>
          var alreadyGoing = attendances.indexOf(event_id); 
          if (current_id==creator_id || current_name=="admin")
          { 
            append_to =  '<a style="font-size:x-small" data-confirm="Are you sure?" rel="nofollow"' +
                        'data-method="delete" href="/events/'+event_id+
                        '">Cancel Event</a> | '+
                        '<a style="font-size:x-small" href="/events/'+event_id+
                        '">Show</a> | ' +
                        '<a style="font-size:x-small" href="/events/'+event_id+
                        '/edit">Edit</a>'
          }
          else if (alreadyGoing < 0)
          {
            append_to = '<a style="font-size:x-small" data-method="put" href="/events/signup?event_id='+event_id+'&user_id='+current_id+'&whatAction=1">Sign up!</a> | '+'<a style="font-size:x-small" href="/events/'+event_id+
                        '">Show</a>'
          }
          else if (alreadyGoing >= 0)
          {
            append_to = '<a style="font-size:x-small" data-method="put" href="/events/signup?event_id='+event_id+'&user_id='+current_id+'&whatAction=0">I Don\'t Want To Go</a> | '+'<a style="font-size:x-small" href="/events/'+event_id+
                        '">Show</a>'
          }

          return ' <p><b>'+ event_name + ':</b>    '+description+'<br><b>Creator: </b>'+creator_name+'<br>'+append_to+
                ' | <b><u><font color="blue"><span onclick="OpenWindow(&quot;' +
                    JSON.parse(xmlhttp.responseText)[i]["latitude"].toString() + '+' +
                    JSON.parse(xmlhttp.responseText)[i]["longitude"].toString() + '+' +
                    JSON.parse(xmlhttp.responseText)[i]["description"] + '&quot, &quot;desc&quot;)"' +
                  'style="cursor: pointer">More Info!</span></b></u></font>' 
                    '</p>'

        }


       
          function OpenWindow(event_info, type)
          {
  
              var info=event_info.split("+")
              var lat=Number(info[0])
              var lng=Number(info[1])
              var desc=info[2]
              if (desc_window != null)
              {
                desc_window.close()
              }

              desc_window = new google.maps.InfoWindow({
                    content: desc,
                    position: new google.maps.LatLng(lat, lng)
                 });
               desc_window.open(gMap);
               windows.push(desc_window)
           
          }

          function clearWindows()
          { 
              for (var i=0; i<windows.length; i++)
              {
                windows[i].close()
              }
          }



    </script>

<body>
<div id="container">

 <div id="menuwrapper">
<h4> <%= @status %></h4>
  <nav class="navbar navbar-default">
    


      <div class="navbar-header">
        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
        <a class="navbar-brand">Filter Events By:</a>
      </div>
    


    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
    <ul class="nav navbar-nav" id="filter_buttons">
      

       <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false"><u>Near me:</u>
          <span class="caret"></span>
        </a>
        <ul class="dropdown-menu" role="menu">
            <li onclick="setFilterArgs('loc', '0'); sendFilterArgs()"><a href="#">Anywhere</a></li>
            <li onclick="setFilterArgs('loc', '250'); sendFilterArgs()"><a href="#">250m (3 min walk)</a></li>
            <li onclick="setFilterArgs('loc', '750'); sendFilterArgs()"><a href="#">750m (10 min walk)</a></li>
            <li onclick="setFilterArgs('loc', '1500'); sendFilterArgs()"><a href="#">1500m (20 min walk)</a></li>
            <li onclick="setFilterArgs('loc', '3000'); sendFilterArgs()"><a href="#">3000m (40 min walk)</a></li>
        </ul>
       </li>


       <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false"><u>Happening In:</u>
          <span class="caret"></span>
        </a>
        <ul class="dropdown-menu" role="menu">
          <li onclick="setFilterArgs('time', '0'); sendFilterArgs()"><a href="#">Anytime</a></li>
          <li onclick="setFilterArgs('time', '30'); sendFilterArgs()"><a href="#">30 mins</a></li>
          <li onclick="setFilterArgs('time', '1'); sendFilterArgs()"><a href="#">1 hour</a></li>
          <li onclick="setFilterArgs('time', '2'); sendFilterArgs()"><a href="#">2 hours</a></li>
          <li onclick="setFilterArgs('time', '5'); sendFilterArgs()"><a href="#">5 hours</a></li>
        </ul>
       </li>   

       <li class="dropdown">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false"><u>Friends:</u>
            <span class="caret"></span>
          </a>
          <ul class="dropdown-menu" role="menu">
            <li onclick="setFilterArgs('friend', '0'); sendFilterArgs()"><a href="#">Anyone</a></li>
            <li onclick="setFilterArgs('friend', 'going_to'); sendFilterArgs()"><a href="#">Events my friends are going to</a></li>
            <li onclick="setFilterArgs('friend', 'created'); sendFilterArgs()"><a href="#">Events my friends made</a></li>
          </ul>
       </li>
    </ul>
  </div>
    </nav>
    <nav class="navbar navbar-default" id="lower-group">
    <div id="below_menu"></div>
    </nav>
  </div><!-- close menuwrapper-->
  
  <div id="content">  
    <nav class="navbar navbar-default" id="map-group">
    <div id="map_canvas" style="width: 560px; height: 570px"></div>
  </nav>
  </div>
</div>


<div id="locationDiv" style="visibility:hidden"></div>
 


<%= link_to 'New Event', new_event_path %>
<%= link_to 'Back', root_path %>
</body>
</html>
